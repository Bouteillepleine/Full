name: OnePlus Build Susf4Ksu (Improved)

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  DEBIAN_FRONTEND: noninteractive
  ROOT_DIR_PREFIX: "OP13r-A15"
  # BRANCH variable is defined but not explicitly used below for sub-repos,
  # ensure the hardcoded branches ('gki-android14-6.1', 'next-susfs-dev') are intended.
  BRANCH: "android14-6.1"
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Workflow Code
        uses: actions/checkout@v4

      - name: Free Disk Space
        run: |
          echo "+++ Freeing disk space"
          sudo apt-get update -qq
          sudo apt-get install -qq curl
          curl -fsSL https://raw.githubusercontent.com/kou/arrow/e49d8ae15583ceff03237571569099a6ad62be32/ci/scripts/util_free_space.sh | bash
          echo "--- Disk space freed"

      - name: Setup Build Environment
        run: |
          echo "+++ Setting up build environment"
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            python3-pip curl git zip unzip gcc g++ make ninja-build \
            bc bison flex libssl-dev libelf-dev wget build-essential \
            python3-dev python3-setuptools rsync cmake libdw-dev zlib1g-dev
          echo "--- Build environment set up"

      - name: Setup Python and Repo Tool
        run: |
          echo "+++ Setting up Python and repo tool"
          python3 -m pip install --upgrade pip
          pip3 install gitpython xmltodict
          mkdir -p ~/.bin
          curl -s https://storage.googleapis.com/git-repo-downloads/repo > ~/.bin/repo
          chmod a+x ~/.bin/repo
          echo "$HOME/.bin" >> $GITHUB_PATH
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          echo "--- Python and repo tool set up"

      - name: Configure Build Directory
        run: |
          ROOT_DIR="${ROOT_DIR_PREFIX}-$(date +'%Y-%m-%d-%I-%M-%p')-release"
          echo "ROOT_DIR=${ROOT_DIR}" >> $GITHUB_ENV
          echo "+++ Creating build directory: builds/${ROOT_DIR}"
          mkdir -p "builds/${ROOT_DIR}"
          cd "builds/${ROOT_DIR}" # Change directory for subsequent steps if needed, but steps use working-directory
          echo "--- Build directory configured"

      - name: Clone Helper Repositories
        # Clones into builds/${{ env.ROOT_DIR }}/
        working-directory: builds/${{ env.ROOT_DIR }}
        run: |
          echo "+++ Cloning helper repositories (AnyKernel3, SUSFS, Patches)"
          repos=(
            "https://github.com/Kernel-SU/AnyKernel3 --depth=1"
            "https://gitlab.com/simonpunk/susfs4ksu.git -b gki-android14-6.1 --depth=1 susfs4ksu" # Clone into named dir
            "https://github.com/WildPlusKernel/kernel_patches.git --depth=1 kernel_patches"     # Clone into named dir
          )
          for repo_cmd in "${repos[@]}"; do
            url=$(echo $repo_cmd | awk '{print $1}')
            # Use git clone with the full command string to handle options like -b and target dir
            echo "Cloning $url ..."
            git clone $repo_cmd || { echo "❌ Failed to clone $url"; exit 1; }
          done
          echo "--- Helper repositories cloned"

      - name: Setup Kernel Source
        # Working directory is relative to the root of the workflow checkout
        # This step creates builds/${{ env.ROOT_DIR }}/kernel_platform/oneplus13r_v
        run: |
          echo "+++ Setting up kernel source via repo"
          cd "builds/${{ env.ROOT_DIR }}" # Ensure we are in the correct root build dir
          mkdir -p kernel_platform/oneplus13r_v
          cd kernel_platform/oneplus13r_v
          repo init -u https://github.com/OnePlusOSS/kernel_manifest.git -b oneplus/sm8650 -m oneplus_13r.xml --depth=1 || { echo "❌ Failed to initialize repo"; exit 1; }
          # Limit repo sync jobs if needed, GitHub runners have limited cores sometimes
          REPO_JOBS=$(($(nproc --all) / 2))
          [ "$REPO_JOBS" -lt 1 ] && REPO_JOBS=1
          echo "Syncing repo with $REPO_JOBS jobs..."
          repo sync -c -j${REPO_JOBS} --force-sync --no-clone-bundle --no-tags || { echo "❌ Failed to sync repo"; exit 1; }
          echo "Removing ABI symbol lists..."
          rm -rf ./kernel_platform/common/android/abi_gki_protected_exports_*
          echo "--- Kernel source setup complete"

      - name: Setup KernelSU
        # Path: builds/${{ env.ROOT_DIR }}/kernel_platform/oneplus13r_v/kernel_platform
        working-directory: builds/${{ env.ROOT_DIR }}/kernel_platform/oneplus13r_v/kernel_platform
        run: |
          echo "+++ Setting up KernelSU"
          curl -LSs "https://raw.githubusercontent.com/rifsxd/KernelSU-Next/next-susfs/kernel/setup.sh" | bash -s next-susfs-dev
          cd KernelSU-Next/kernel
          # Calculate KSU version based on commits in the *cloned* KernelSU-Next repo
          KSU_VERSION=$(expr $(/usr/bin/git rev-list --count HEAD) + 10200)
          echo "Detected KSU Version: $KSU_VERSION"
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          sed -i "s/DKSU_VERSION=11998/DKSU_VERSION=${KSU_VERSION}/" Makefile
          echo "--- KernelSU setup complete (Version: ${KSU_VERSION})"

      - name: Setup SUSFS and Apply Patches
        # Path: builds/${{ env.ROOT_DIR }}/kernel_platform/oneplus13r_v/kernel_platform
        working-directory: builds/${{ env.ROOT_DIR }}/kernel_platform/oneplus13r_v/kernel_platform
        run: |
          echo "+++ Setting up SUSFS and applying patches"
          set -euxo pipefail # Exit on error, print commands

          # Define relative path from current dir to the root build dir where helper repos were cloned
          # Current: builds/ROOT_DIR/kernel_platform/oneplus13r_v/kernel_platform
          # Target:  builds/ROOT_DIR/
          # Path: ../../../../
          HELPER_REPO_ROOT="../../../../"

          echo "Copying SUSFS files and patches..."
          # Copy patch files needed for application later
          cp "${HELPER_REPO_ROOT}susfs4ksu/kernel_patches/50_add_susfs_in_gki-android14-6.1.patch" ./common/
          cp "${HELPER_REPO_ROOT}kernel_patches/next/0001-kernel-patch-susfs-v1.5.5-to-KernelSU-Next-v1.0.5.patch" ./KernelSU-Next/
          cp "${HELPER_REPO_ROOT}kernel_patches/next/syscall_hooks.patch" ./common/
          if [ -f "${HELPER_REPO_ROOT}kernel_patches/69_hide_stuff.patch" ]; then
             cp "${HELPER_REPO_ROOT}kernel_patches/69_hide_stuff.patch" ./common/
          fi

          # Copy SUSFS source files directly
          cp ${HELPER_REPO_ROOT}susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ${HELPER_REPO_ROOT}susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/

          echo "Applying patches..."
          # Patch KernelSU-Next (relative path is now correct as file was copied)
          cd ./KernelSU-Next
          patch -p1 < 0001-kernel-patch-susfs-v1.5.5-to-KernelSU-Next-v1.0.5.patch || { echo "⚠️ Patch 0001 failed, continuing..."; true; }
          cd .. # Back to kernel_platform

          # Patch common kernel tree (relative paths are now correct)
          cd ./common
          patch -p1 < 50_add_susfs_in_gki-android14-6.1.patch || { echo "⚠️ Patch 50 failed, continuing..."; true; }

          # Conditionally apply hide_stuff patch if it exists and was copied
          if [ -f 69_hide_stuff.patch ]; then
             echo "Applying 69_hide_stuff.patch..."
             patch -p1 -F 3 < 69_hide_stuff.patch || { echo "⚠️ Patch 69 failed, continuing..."; true; }
          else
             echo "Skipping 69_hide_stuff.patch (not found)."
          fi

          patch -p1 -F 3 < syscall_hooks.patch || { echo "⚠️ Patch syscall_hooks failed, continuing..."; true; }
          cd .. # Back to kernel_platform

          echo "--- SUSFS setup and patching complete"
          set +euxo pipefail # Turn off strict mode

      - name: Configure Kernel
        # Path: builds/${{ env.ROOT_DIR }}/kernel_platform/oneplus13r_v/kernel_platform
        working-directory: builds/${{ env.ROOT_DIR }}/kernel_platform/oneplus13r_v/kernel_platform
        run: |
          echo "+++ Configuring kernel (gki_defconfig)"
          set -e # Exit on error

          # Remove check_defconfig check early
          sed -i '2s/check_defconfig//' ./common/build.config.gki

          # Add custom configs
          CONFIG_FILE="./common/arch/arm64/configs/gki_defconfig"
          echo "Appending configs to $CONFIG_FILE"
          {
            echo "" # Add newline for separation
            echo "# KernelSU Configs"
            echo "CONFIG_KSU=y"
            echo "CONFIG_KSU_WITH_KPROBES=n"
            echo "# SUSFS Configs"
            echo "CONFIG_KSU_SUSFS=y"
            echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y"
            echo "CONFIG_KSU_SUSFS_SUS_PATH=y"
            echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y"
            echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y"
            echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y"
            echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y"
            echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n"
            echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y"
            echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y"
            echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y"
            echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" # Consider disabling for release builds unless debugging
            echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y"
            echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y"
            echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y"
            echo "CONFIG_KSU_SUS_SU=n"
            echo "# Filesystem Enhancements"
            echo "CONFIG_TMPFS_XATTR=y"
            echo "CONFIG_TMPFS_POSIX_ACL=y"
            echo "# Network Enhancements"
            echo "CONFIG_IP_NF_TARGET_TTL=y"
            echo "CONFIG_IP6_NF_TARGET_HL=y"
            echo "CONFIG_IP6_NF_MATCH_HL=y"
            echo "# Scheduler & Performance"
            echo "CONFIG_SCHED_CLASS_EXT=y"
            echo "CONFIG_SMP=y"
            echo "CONFIG_CPU_FREQ_GOV_SCHEDUTIL=y"
            echo "CONFIG_MSM_PERFORMANCE=y"
            echo "# Power Management"
            echo "CONFIG_NO_HZ_IDLE=y"
            echo "CONFIG_PM_SLEEP_SMP=y"
            echo "CONFIG_ENERGY_MODEL=y"
            echo "CONFIG_PM_AUTOSLEEP=y"
            echo "# Disable Debugging for Release"
            echo "CONFIG_DEBUG_KERNEL=n"
            echo "CONFIG_DYNAMIC_DEBUG=n"
            echo "CONFIG_DEBUG_INFO=n"
          } >> "$CONFIG_FILE"

          echo "--- Kernel configuration complete"
          set +e

      - name: Clean Local Version Strings
        # Path: builds/${{ env.ROOT_DIR }}/kernel_platform/oneplus13r_v/kernel_platform
        working-directory: builds/${{ env.ROOT_DIR }}/kernel_platform/oneplus13r_v/kernel_platform
        run: |
          echo "+++ Cleaning local version strings (-dirty)"
          # Removed duplicate: sed -i 's/check_defconfig//' ./common/build.config.gki
          sed -i 's/-dirty//' ./common/scripts/setlocalversion
          sed -i 's/-dirty//' ./msm-kernel/scripts/setlocalversion
          sed -i 's/-dirty//' ./external/dtc/scripts/setlocalversion
          # Use find to handle potential missing file gracefully
          find ./build/kernel/kleaf -name 'workspace_status_stamp.py' -exec sed -i 's/-dirty//' {} \; || echo "No workspace_status_stamp.py found or sed failed."
          echo "--- Local version strings cleaned"

      - name: Build Kernel
        # Path: builds/${{ env.ROOT_DIR }}/kernel_platform/oneplus13r_v/
        working-directory: builds/${{ env.ROOT_DIR }}/kernel_platform/oneplus13r_v/
        run: |
          echo "+++ Building kernel with Bazel"
          cd kernel_platform # Move into the directory containing build_with_bazel.py
          # Bazel will create the 'out' directory if needed
          # Using full LTO as requested
          ./build_with_bazel.py \
            -t pineapple \
            gki \
            --jobs=$(nproc --all) \
            --verbose_failures \
            --config=stamp \
            --user_kmi_symbol_lists=//msm-kernel:android/abi_gki_aarch64_qcom \
            --ignore_missing_projects \
            --lto=full \
            -o "$(pwd)/out" || { echo "❌ Bazel build failed"; exit 1; }
          echo "--- Kernel build complete"

      - name: Create ZIP Package
        # Path: builds/${{ env.ROOT_DIR }}
        working-directory: builds/${{ env.ROOT_DIR }}
        run: |
          echo "+++ Creating flashable ZIP package"
          KERNEL_IMAGE_PATH="kernel_platform/oneplus13r_v/kernel_platform/out/dist/Image"
          if [ ! -f "$KERNEL_IMAGE_PATH" ]; then
            echo "❌ Kernel image not found at $KERNEL_IMAGE_PATH"
            # List contents for debugging
            echo "Contents of kernel_platform/oneplus13r_v/kernel_platform/out/dist/:"
            ls -l kernel_platform/oneplus13r_v/kernel_platform/out/dist/ || echo "Cannot list dist directory."
            exit 1
          fi
          echo "Kernel image found."

          cp "$KERNEL_IMAGE_PATH" AnyKernel3/Image || { echo "❌ Failed to copy kernel image to AnyKernel3"; exit 1; }
          echo "Kernel image copied to AnyKernel3."

          cd AnyKernel3
          ZIP_NAME="OP13r-KSU-${{ env.KSUVER }}.zip"
          echo "📦 Creating zip file: ../$ZIP_NAME"
          zip -r9 "../$ZIP_NAME" ./* || { echo "❌ Failed to create zip file"; exit 1; }

          cd .. # Back to builds/${{ env.ROOT_DIR }}
          echo "Zip file created:"
          ls -lh "$ZIP_NAME"
          echo "zip_name=$ZIP_NAME" >> $GITHUB_ENV
          echo "--- ZIP package created"

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kernel-${{ env.ROOT_DIR }}
          path: builds/${{ env.ROOT_DIR }}/*.zip
          if-no-files-found: error # Fail the workflow if the zip isn't found
